import socket
import threading
from pymavlink import mavutil

# --- CONFIGURATION ---
# Adresse de l'antenne r√©ceptrice UDP
RECEIVER_IP = "192.168.254.115"
RECEIVER_PORT = 14555
ADDR = (RECEIVER_IP, RECEIVER_PORT)

# Adresse du serveur TCP (pour arr√™t distant)
TCP_IP = "192.168.254.120"
TCP_PORT = 3000

# Port Pixhawk
PIXHAWK_PORT = "/dev/ttyACM0"  # Modifier si n√©cessaire (ex: /dev/ttyUSB0 ou COM3 sous Windows)
BAUDRATE = 115200  # Vitesse de communication

# Flag d'arr√™t
stop_flag = False

# --- CONNEXION √Ä LA PIXHAWK ---
print(f"Connexion √† la Pixhawk sur {PIXHAWK_PORT} √† {BAUDRATE} bauds...")
master = mavutil.mavlink_connection(PIXHAWK_PORT, baud=BAUDRATE)
master.wait_heartbeat()
print("‚úÖ Connexion √©tablie avec la Pixhawk!")

# Demander les flux de donn√©es IMU
master.mav.request_data_stream_send(
    master.target_system, master.target_component,
    mavutil.mavlink.MAV_DATA_STREAM_RAW_SENSORS,
    10,  # Fr√©quence de 10 Hz
    1
)


# --- FONCTION D'ENVOI UDP ---
def udp_sender():
    global stop_flag
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    print("üì° Transmission des donn√©es Pixhawk via UDP...")

    while not stop_flag:
        msg = master.recv_match(type=['RAW_IMU', 'SCALED_IMU2', 'SCALED_IMU3', 'ATTITUDE'], blocking=True)
        
        if msg:
            msg_type = msg.get_type()
            data = ""

            if msg_type in ['RAW_IMU', 'SCALED_IMU2', 'SCALED_IMU3']:
                data = f"{msg_type} | Acc√©l√©ration: x={msg.xacc}, y={msg.yacc}, z={msg.zacc} | " \
                       f"Gyroscope: x={msg.xgyro}, y={msg.ygyro}, z={msg.zgyro} | " \
                       f"Magn√©tom√®tre: x={msg.xmag}, y={msg.ymag}, z={msg.zmag}"
            
            elif msg_type == 'ATTITUDE':
                data = f"ATTITUDE | Roll={msg.roll:.2f}, Pitch={msg.pitch:.2f}, Yaw={msg.yaw:.2f}"

            sock.sendto(data.encode('utf-8'), ADDR)
            print(f"üì§ Donn√©es envoy√©es : {data}")

    sock.close()
    print("üì¥ Transmission UDP arr√™t√©e.")


# --- FONCTION DE R√âCEPTION TCP ---
def tcp_listener():
    global stop_flag
    serveur = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    serveur.bind((TCP_IP, TCP_PORT))
    serveur.listen()

    print(f"üñ•Ô∏è Serveur TCP en √©coute sur {TCP_IP}:{TCP_PORT}...")

    while not stop_flag:
        try:
            client, infosclient = serveur.accept()
            request = client.recv(1024)
            message = request.decode('utf-8').strip()

            print(f"üì© Message TCP re√ßu : {message} de {infosclient[0]}")

            if message.lower() == "stop":
                print("üõë Message d'arr√™t re√ßu, arr√™t de l'√©mission UDP.")
                stop_flag = True  # Active le flag pour stopper l'UDP

            client.close()
        except Exception as e:
            print(f"‚ùå Erreur TCP : {e}")
            break

    serveur.close()
    print("üì¥ Serveur TCP ferm√©.")


# --- LANCEMENT DES THREADS ---
udp_thread = threading.Thread(target=udp_sender)
tcp_thread = threading.Thread(target=tcp_listener, daemon=True)  # TCP tourne en arri√®re-plan

udp_thread.start()
tcp_thread.start()

try:
    udp_thread.join()  # Attendre la fin de l'UDP
except KeyboardInterrupt:
    print("\nüõë Interruption d√©tect√©e, arr√™t des serveurs.")
    stop_flag = True

print("üèÅ Programme termin√©.")
