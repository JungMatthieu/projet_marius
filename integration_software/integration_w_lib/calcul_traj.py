import socket
import json
import threading

# --- CONFIGURATION ---

UDP_IP = "0.0.0.0"  # √âcoute sur toutes les interfaces
UDP_PORT = 4000  # Port UDP
BUFFER_SIZE = 1024  # Taille du buffer

# Adresse du serveur TCP
TCP_IP = "192.168.254.120"
TCP_PORT = 3000

# Adresse Udp local
UDP_SEND_IP = "127.0.0.1"  # Adresse du serveur UDP
UDP_SEND_PORT_NETWORK = 4002  # Port d'envoi des donn√©es

# Flag d'arr√™t
stop_flag = False

# Stockage des derni√®res donn√©es re√ßues
latest_data = {}




def calcul_traj(latest_data):
    # Exemple de calculs en utilisant acc['x']
    acc_x = latest_data.get('imu', {}).get('acc', {}).get('x', None)

    if acc_x is None:
        print("‚ùå Donn√©es manquantes pour le calcul de la trajectoire.")
        return None  # Retourne None ou une valeur par d√©faut si les donn√©es sont manquantes

    # Par exemple, supposons que l'on effectue un calcul bas√© sur acc_x.
    # Calcul du cap ou d'un autre param√®tre avec acc_x.
    cap = acc_x  # Exemple de calcul (tu peux adapter avec d'autres formules si n√©cessaire)
    return cap

# --- FONCTION D'ENVOI UDP ---
def udp_forwarder():
    """Envoie les donn√©es calcul√©es en UDP sur le r√©seau."""
    global latest_data
    while not stop_flag:
        if latest_data:  # V√©rifie si les donn√©es sont disponibles
            cap = calcul_traj(latest_data)  # Calcule la trajectoire (ou cap)
            if cap is not None:
                try:
                    send_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
                    send_sock.sendto(str(cap).encode('utf-8'), (UDP_SEND_IP, UDP_SEND_PORT_NETWORK))  # Envoie les donn√©es calcul√©es
                    print(f"üì§ Donn√©es envoy√©es : {cap}")
                except Exception as e:
                    print(f"‚ùå Erreur lors de l'envoi des donn√©es : {e}")
        else:
            print("‚ö†Ô∏è Pas de donn√©es √† envoyer, attend les nouvelles donn√©es UDP.")
        
        # Pour √©viter une boucle trop rapide, on peut ajouter un petit d√©lai
        threading.Event().wait(1)

# --- LANCEMENT DES THREADS UDP ---
udp_thread = threading.Thread(target=udp_listener, daemon=True)
tcp_thread = threading.Thread(target=tcp_listener, daemon=True)  # TCP tourne en arri√®re-plan
udp_forwarder_thread = threading.Thread(target=udp_forwarder, daemon=True)  # Envoi des donn√©es calcul√©es
udp_thread.start()
tcp_thread.start()
udp_forwarder_thread.start()

# Maintenir le script en vie
try:
    while True:
        pass
except KeyboardInterrupt:
    print("\nInterruption d√©tect√©e, arr√™t des serveurs.")
    stop_flag = True
