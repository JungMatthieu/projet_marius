# udp_utils.py
import socket
import json

BUFFER_SIZE = 1024  # Taille du buffer

def udp_listener(ip, port, callback):
    """
    √âcoute les messages UDP entrants sur l'IP et le port sp√©cifi√©s.
    
    :param ip: Adresse IP d'√©coute
    :param port: Port d'√©coute
    :param callback: Fonction √† appeler avec les donn√©es re√ßues
    """
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind((ip, port))
    
    print(f"üñ•Ô∏è Serveur UDP en √©coute sur {ip}:{port}")

    while True:
        try:
            data, addr = sock.recvfrom(BUFFER_SIZE)
            decoded_data = data.decode('utf-8')  # Convertir en string
            parsed_data = json.loads(decoded_data)  # Convertir en JSON
            
            print(f"üì• Donn√©es re√ßues de {addr}: {parsed_data}")

            # Appeler la fonction callback pour traiter les donn√©es
            callback(decoded_data)

        except json.JSONDecodeError:
            print("‚ùå Erreur : donn√©es re√ßues mal format√©es")
        except Exception as e:
            print(f"‚ùå Erreur inattendue : {e}")

def udp_forwarder(data, dest_ip, dest_port):
    """
    Transmet des donn√©es en UDP vers un autre appareil.
    
    :param data: Donn√©es √† envoyer (string)
    :param dest_ip: Adresse IP de destination
    :param dest_port: Port de destination
    """
    try:
        send_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        send_sock.sendto(data.encode('utf-8'), (dest_ip, dest_port))
        print(f"üì§ Donn√©es envoy√©es √† {dest_ip}:{dest_port}")
    except Exception as e:
        print(f"‚ùå Erreur lors de l'envoi des donn√©es : {e}")
